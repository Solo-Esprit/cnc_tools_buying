import logging
import os
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import gspread
from google.oauth2.service_account import Credentials
import json
from flask import Flask, request

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.environ["TELEGRAM_TOKEN"]
SHEET_ID = os.environ["GOOGLE_SHEET_ID"]
CREDENTIALS_JSON = os.environ["GOOGLE_CREDENTIALS_JSON"]
PORT = int(os.environ.get("PORT", 10000))

# === GOOGLE AUTH ===
SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
creds_dict = json.loads(CREDENTIALS_JSON)
credentials = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gc = gspread.authorize(credentials)
sheet = gc.open_by_key(SHEET_ID)

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –¢–ê–ë–õ–ò–¶–ï–ô ===
def get_worksheet(chat_id: int):
    try:
        return sheet.worksheet(str(chat_id))
    except gspread.WorksheetNotFound:
        ws = sheet.add_worksheet(title=str(chat_id), rows="100", cols="2")
        ws.update('A1', '–ê—Ä—Ç–∏–∫—É–ª')
        return ws

def get_items(chat_id: int):
    ws = get_worksheet(chat_id)
    return [item for item in ws.col_values(1)[1:] if item.strip()]

def add_item_to_sheet(chat_id: int, item: str):
    get_worksheet(chat_id).append_row([item])

def remove_item_from_sheet(chat_id: int, index: int):
    ws = get_worksheet(chat_id)
    ws.delete_rows(index + 2)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõí –ë–æ—Ç –¥–ª—è –∑–∞–∫—É–ø–æ–∫\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add <–∞—Ä—Ç–∏–∫—É–ª> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å"
    )

async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    args = context.args
    if not args:
        await update.message.reply_text("UsageId: /add <–∞—Ä—Ç–∏–∫—É–ª>")
        return
    item = " ".join(args).strip()
    add_item_to_sheet(chat_id, item)
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {item}")

async def show_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    items = get_items(chat_id)
    if not items:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç üõí")
        return
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    keyboard = [[InlineKeyboardButton(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item}", callback_data=f"remove_{i}")]
                for i, item in enumerate(items)]
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫:", reply_markup=InlineKeyboardMarkup(keyboard))

async def clear_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    ws = get_worksheet(chat_id)
    rows = len(ws.col_values(1))
    if rows > 1:
        ws.delete_rows(2, rows)
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω üßπ")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    data = query.data
    if data.startswith("remove_"):
        try:
            index = int(data.split("_")[1])
            items = get_items(chat_id)
            if 0 <= index < len(items):
                remove_item_from_sheet(chat_id, index)
                await query.edit_message_text(f"‚úÖ –£–±—Ä–∞–Ω–æ: {items[index]}")
            else:
                await query.edit_message_text("–ü–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞: %s", e)
            await query.edit_message_text("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.")

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
def main():
    # –°–æ–∑–¥–∞—ë–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    flask_app = Flask(__name__)

    @flask_app.route(f"/{TOKEN}", methods=["POST"])
    def telegram_webhook():
        # –ü–µ—Ä–µ–¥–∞—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –±–æ—Ç–∞
        flask_app.bot_app.update_queue.put_nowait(
            Update.de_json(request.get_json(force=True), flask_app.bot_app.bot)
        )
        return "OK"

    @flask_app.route("/")
    def hello():
        return "Telegram Purchase Bot is running!"

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
    bot_app = Application.builder().token(TOKEN).build()
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CommandHandler("add", add_item))
    bot_app.add_handler(CommandHandler("list", show_list))
    bot_app.add_handler(CommandHandler("clear", clear_list))
    bot_app.add_handler(CallbackQueryHandler(button_handler))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ bot_app –≤ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    flask_app.bot_app = bot_app

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
    import asyncio
    from threading import Thread

    def run_bot():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        webhook_url = f"https://{os.environ['RENDER_EXTERNAL_HOSTNAME']}/{TOKEN}"
        loop.run_until_complete(bot_app.bot.set_webhook(url=webhook_url))
        logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {webhook_url}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–µ (–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ webhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—ë)
        bot_app.run_polling(close_loop=False)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_bot, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    flask_app.run(host="0.0.0.0", port=PORT)

if __name__ == '__main__':
    main()
