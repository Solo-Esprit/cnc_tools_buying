import logging
import os
import time
from typing import List, Optional
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import gspread
from google.oauth2.service_account import Credentials
import json
from flask import Flask, request
import asyncio
import threading
import queue
import re

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.environ["TELEGRAM_TOKEN"]
SHEET_ID = os.environ["GOOGLE_SHEET_ID"]
CREDENTIALS_JSON = os.environ["GOOGLE_CREDENTIALS_JSON"]
PORT = int(os.environ.get("PORT", 10000))

# === GOOGLE AUTH ===
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è add_worksheet!
]

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –ö–õ–ê–°–° –î–õ–Ø –†–ê–ë–û–¢–´ –° GOOGLE –¢–ê–ë–õ–ò–¶–ï–ô ===
class GoogleSheetsManager:
    def __init__(self, sheet_id: str, credentials_json: str):
        creds_dict = json.loads(credentials_json)
        credentials = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
        gc = gspread.authorize(credentials)
        self.sheet = gc.open_by_key(sheet_id)
        self._worksheet_cache = {}  # –∫—ç—à –¥–ª—è –ª–∏—Å—Ç–æ–≤

    def get_worksheet(self, chat_id: int):
        if chat_id in self._worksheet_cache:
            return self._worksheet_cache[chat_id]
        try:
            ws = self.sheet.worksheet(str(chat_id))
            self._worksheet_cache[chat_id] = ws
            return ws
        except gspread.WorksheetNotFound:
            try:
                ws = self.sheet.add_worksheet(title=str(chat_id), rows="100", cols="2")
                ws.update('A1', '–ê—Ä—Ç–∏–∫—É–ª')
                self._worksheet_cache[chat_id] = ws
                logging.info("üÜï –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç –¥–ª—è —á–∞—Ç–∞ %s", chat_id)
                return ws
            except Exception as e:
                logging.error("üí• –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∏—Ç—å –ª–∏—Å—Ç –¥–ª—è —á–∞—Ç–∞ %s: %s", chat_id, e, exc_info=True)
                raise
        except Exception as e:
            logging.error("üí• –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏—Å—Ç–∞ %s: %s", chat_id, e, exc_info=True)
            raise

    def get_items(self, chat_id: int) -> List[str]:
        try:
            ws = self.get_worksheet(chat_id)
            items = [item for item in ws.col_values(1)[1:] if item.strip()]
            logging.info("üìã –ü–æ–ª—É—á–µ–Ω–æ %d –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —á–∞—Ç–∞ %s", len(items), chat_id)
            return items
        except Exception as e:
            logging.error("üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è —á–∞—Ç–∞ %s: %s", chat_id, e, exc_info=True)
            return []

    def add_item(self, chat_id: int, item: str, quantity: int = 1):
        try:
            ws = self.get_worksheet(chat_id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞—Ä—Ç–∏–∫—É–ª (–±–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)
            items = self.get_items(chat_id)
            existing_index = None
            existing_quantity = 0
            for i, row in enumerate(items):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ "–ê—Ä—Ç–∏–∫—É–ª (N)"
                parsed_item, parsed_qty = self._parse_item(row)
                if parsed_item == item:
                    existing_index = i
                    existing_quantity = parsed_qty
                    break

            if existing_index is not None:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É: —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                new_quantity = existing_quantity + quantity
                new_row_value = f"{item} ({new_quantity})" if new_quantity > 1 else item
                # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É (—Å—Ç—Ä–æ–∫–∞ = –∏–Ω–¥–µ–∫—Å + 2, —Ç.–∫. A1 = –∑–∞–≥–æ–ª–æ–≤–æ–∫)
                cell = f"A{existing_index + 2}"
                ws.update(cell, [new_row_value])
                logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: —á–∞—Ç %s, '%s' -> '%s'", chat_id, items[existing_index], new_row_value)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                row_value = f"{item} ({quantity})" if quantity > 1 else item
                ws.append_row([row_value])
                logging.info("‚úÖ –ó–∞–ø–∏—Å—å –≤ Google –¢–∞–±–ª–∏—Ü—É: —á–∞—Ç %s, '%s'", chat_id, row_value)
        except Exception as e:
            logging.error("üí• –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É –¥–ª—è —á–∞—Ç–∞ %s: %s", chat_id, e, exc_info=True)
            raise

    def remove_item(self, chat_id: int, index: int):
        try:
            start = time.perf_counter()
            ws = self.get_worksheet(chat_id)
            ws.delete_rows(index + 2)
            logging.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è %d –∏–∑ —á–∞—Ç–∞ %s (–≤—Ä–µ–º—è: %.2f—Å)", index, chat_id, time.perf_counter() - start)
        except Exception as e:
            logging.error("üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —á–∞—Ç–∞ %s: %s", chat_id, e, exc_info=True)
            raise

    def _parse_item(self, row: str):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—Ä—Ç–∏–∫—É–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ '–ê—Ä—Ç–∏–∫—É–ª (N)' –∏–ª–∏ '–ê—Ä—Ç–∏–∫—É–ª'"""
        match = re.match(r'^(.+?)\s*\((\d+)\)\s*$', row.strip())
        if match:
            item = match.group(1).strip()
            quantity = int(match.group(2))
            return item, quantity
        else:
            return row.strip(), 1


# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê ===
gs_manager = GoogleSheetsManager(SHEET_ID, CREDENTIALS_JSON)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logging.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –≤—ã–∑–≤–∞–Ω –¥–ª—è %s", user.id)
    await update.message.reply_text(
        "üõí –ë–æ—Ç –¥–ª—è –∑–∞–∫—É–ø–æ–∫\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add <–∞—Ä—Ç–∏–∫—É–ª> (–∫–æ–ª-–≤–æ) ‚Äî –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: /add –ö–ª—é—á 10–º–º (5) –∏–ª–∏ /add 12345-KEY (2))\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/add <–∞—Ä—Ç–∏–∫—É–ª> (–∫–æ–ª-–≤–æ) ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: /add –ö–ª—é—á 10–º–º (5))\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/clear ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    items = gs_manager.get_items(chat_id)
    total_items = sum(gs_manager._parse_item(item)[1] for item in items)
    await update.message.reply_text(f"üìä –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ —Å–ø–∏—Å–∫–µ: {len(items)}\n"
                                    f"üì¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_items}")

async def add_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = update.effective_chat.id
    args = context.args
    logging.info("üì• /add –æ—Ç %s –≤ —á–∞—Ç–µ %s: args=%s", user.id, chat_id, args)
    if not args:
        await update.message.reply_text("UsageId: /add <–∞—Ä—Ç–∏–∫—É–ª> (–∫–æ–ª-–≤–æ)\n–ü—Ä–∏–º–µ—Ä: /add –ö–ª—é—á 10–º–º (5)")
        return

    full_text = " ".join(args)
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω " (N)" –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    match = re.search(r'\s*\((\d+)\)\s*$', full_text)
    if match:
        quantity_str = match.group(1)
        quantity = int(quantity_str)
        item = full_text[:match.start()].strip() # —Ç–µ–∫—Å—Ç –¥–æ "(N)"
        if not item:
            await update.message.reply_text("–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
    else:
        quantity = 1
        item = full_text.strip()
        if not item:
            await update.message.reply_text("–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return

    try:
        gs_manager.add_item(chat_id, item, quantity)
        formatted_item = f"{item} ({quantity})" if quantity > 1 else item
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {formatted_item}")
    except gspread.exceptions.APIError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ Google API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.")
    except Exception as e:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logging.error("–û—à–∏–±–∫–∞ –≤ /add: %s", e)

async def show_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        items = gs_manager.get_items(chat_id)
        if not items:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç üõí")
            return
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = [[InlineKeyboardButton(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item}", callback_data=f"remove_{i}")]
                    for i, item in enumerate(items)]
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–∫—É–ø–æ–∫:", reply_markup=InlineKeyboardMarkup(keyboard))
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞.")
        logging.error("–û—à–∏–±–∫–∞ –≤ /list: %s", e)

async def clear_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    try:
        ws = gs_manager.get_worksheet(chat_id)
        rows = len(ws.col_values(1))
        if rows > 1:
            ws.delete_rows(2, rows)
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω üßπ")
        logging.info("üßπ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω –¥–ª—è —á–∞—Ç–∞ %s", chat_id)
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ.")
        logging.error("–û—à–∏–±–∫–∞ –≤ /clear: %s", e)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    data = query.data
    if data.startswith("remove_"):
        try:
            index = int(data.split("_")[1])
            items = gs_manager.get_items(chat_id)
            if 0 <= index < len(items):
                gs_manager.remove_item(chat_id, index)
                await query.edit_message_text(f"‚úÖ –£–±—Ä–∞–Ω–æ: {items[index]}")
            else:
                await query.edit_message_text("–ü–æ–∑–∏—Ü–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
        except Exception as e:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.")
            logging.error("–û—à–∏–±–∫–∞ –≤ –∫–Ω–æ–ø–∫–µ: %s", e)

# === –ú–ï–ñ–ü–û–¢–û–ß–ù–ê–Ø –û–ß–ï–†–ï–î–¨ ===
cross_thread_queue = queue.Queue()
bot_instance = None

# === –§–û–ù–û–í–´–ô TELEGRAM WORKER ===
async def telegram_worker():
    global bot_instance
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("add", add_item))
    app.add_handler(CommandHandler("list", show_list))
    app.add_handler(CommandHandler("clear", clear_list))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button_handler))

    await app.initialize()
    await app.start()
    bot_instance = app.bot
    logging.info("‚úÖ Telegram worker –∑–∞–ø—É—â–µ–Ω")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    hostname = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
    if not hostname:
        logging.error("‚ùå RENDER_EXTERNAL_HOSTNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return
    BOT_ID = TOKEN.split(':')[0]
    webhook_url = f"https://{hostname}/webhook-{BOT_ID}"
    await app.bot.set_webhook(url=webhook_url)
    logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    while True:
        try:
            update = cross_thread_queue.get(timeout=1)
            await app.process_update(update)
        except queue.Empty:
            continue
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ worker: %s", e)

def run_telegram_worker():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(telegram_worker())

# === FLASK ===
flask_app = Flask(__name__)

@flask_app.route("/webhook-<bot_id>", methods=["POST"])
def telegram_webhook(bot_id):
    expected_id = TOKEN.split(':')[0]
    if bot_id != expected_id:
        logging.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π bot_id: %s", bot_id)
        return "OK"
    json_data = request.get_json()
    if json_data is None:
        logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–π JSON")
        return "OK"
    update_id = json_data.get("update_id", "unknown")
    logging.info("üì• –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s", update_id)
    try:
        update = Update.de_json(json_data, bot_instance)
        cross_thread_queue.put(update)
    except Exception as e:
        logging.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤ –æ—á–µ—Ä–µ–¥—å: %s", e, exc_info=True)
    return "OK"

@flask_app.route("/")
def hello():
    return "‚úÖ Telegram Purchase Bot is running on Render"

# === MAIN ===
def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=run_telegram_worker, daemon=True).start()
    # –ñ–¥—ë–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ bot_instance
    import time
    while bot_instance is None:
        time.sleep(0.1)
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –Ω–∞ 0.0.0.0:PORT (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Render)
    flask_app.run(host="0.0.0.0", port=PORT)

if __name__ == '__main__':
    main()
